{"ast":null,"code":"var _jsxFileName = \"/home/soninishit/Desktop/successive/quiz-app/Quiz/src/components/question.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { MainDiv, Options, SingleQuestion, OptionsBtn } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Question = _ref => {\n  _s();\n\n  let {\n    currQuestion,\n    setCurrQuestion,\n    questions,\n    options,\n    correct,\n    score,\n    setScore,\n    setQuestions\n  } = _ref;\n  const [selected, setSelected] = useState();\n  const [err, setErr] = useState(false);\n\n  const handleSelect = i => {\n    if (selected === i && selected === correct) {\n      return 'selected';\n    } else if (selected === i && selected !== correct) {\n      return 'wrong';\n    } else if (i === correct) {\n      return 'select';\n    }\n  };\n\n  const handleCheck = i => {\n    setSelected(i);\n\n    if (i === correct) {\n      setScore(score + 1);\n    }\n\n    setScore(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MainDiv, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Question \", currQuestion + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SingleQuestion, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: questions[currQuestion].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Options, {\n          className: \"option\",\n          children: [err && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Choose appropriate ans!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this), options && options.map(i => /*#__PURE__*/_jsxDEV(OptionsBtn, {\n            onClick: () => handleCheck(i),\n            className: `${selected && handleSelect(i)}`,\n            children: i\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 56\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Next Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Question, \"HnDbB9RoWeDevUly5aMeoV4Yo9g=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/home/soninishit/Desktop/successive/quiz-app/Quiz/src/components/question.js"],"names":["useState","MainDiv","Options","SingleQuestion","OptionsBtn","Question","currQuestion","setCurrQuestion","questions","options","correct","score","setScore","setQuestions","selected","setSelected","err","setErr","handleSelect","i","handleCheck","question","map"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,cAA3B,EAA0CC,UAA1C,QAA2D,SAA3D;;;;AAEA,MAAMC,QAAQ,GAAG,QASX;AAAA;;AAAA,MATY;AACdC,IAAAA,YADc;AAEdC,IAAAA,eAFc;AAGdC,IAAAA,SAHc;AAIdC,IAAAA,OAJc;AAKdC,IAAAA,OALc;AAMdC,IAAAA,KANc;AAOdC,IAAAA,QAPc;AAQdC,IAAAA;AARc,GASZ;AACF,QAAK,CAACC,QAAD,EAAUC,WAAV,IAAyBf,QAAQ,EAAtC;AACA,QAAK,CAACgB,GAAD,EAAKC,MAAL,IAAejB,QAAQ,CAAC,KAAD,CAA5B;;AAEA,QAAMkB,YAAY,GAAIC,CAAD,IAAO;AACxB,QAAGL,QAAQ,KAAKK,CAAb,IAAkBL,QAAQ,KAAKJ,OAAlC,EAA0C;AACtC,aAAO,UAAP;AACH,KAFD,MAEM,IAAGI,QAAQ,KAAKK,CAAb,IAAkBL,QAAQ,KAAKJ,OAAlC,EAA0C;AAC5C,aAAO,OAAP;AACH,KAFK,MAEA,IAAGS,CAAC,KAAKT,OAAT,EAAiB;AACnB,aAAO,QAAP;AACH;AACJ,GARD;;AAUA,QAAMU,WAAW,GAAID,CAAD,IAAO;AACvBJ,IAAAA,WAAW,CAACI,CAAD,CAAX;;AACA,QAAGA,CAAC,KAAKT,OAAT,EAAiB;AACbE,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AACDC,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACH,GAND;;AAQA,sBACI;AAAA,2BACA,QAAC,OAAD;AAAA,8BACI;AAAA,gCAAcN,YAAY,GAAG,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI,QAAC,cAAD;AAAA,gCACI;AAAA,oBAAKE,SAAS,CAACF,YAAD,CAAT,CAAwBe;AAA7B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI,QAAC,OAAD;AAAS,UAAA,SAAS,EAAC,QAAnB;AAAA,qBACSL,GAAG,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADhB,EAESP,OAAO,IAAIA,OAAO,CAACa,GAAR,CAAaH,CAAD,iBAAO,QAAC,UAAD;AAC/B,YAAA,OAAO,EAAE,MAAMC,WAAW,CAACD,CAAD,CADK;AAE/B,YAAA,SAAS,EAAG,GAAEL,QAAQ,IAAII,YAAY,CAACC,CAAD,CAAI,EAFX;AAAA,sBAG7BA;AAH6B;AAAA;AAAA;AAAA;AAAA,kBAAnB,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAWI;AAAA,kCACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADR,eAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFR;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAyBH,CAxDD;;GAAMd,Q;;KAAAA,Q;AA0DN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\nimport { MainDiv, Options, SingleQuestion,OptionsBtn} from \"./style\";\n\nconst Question = ({\n    currQuestion,\n    setCurrQuestion,\n    questions,\n    options,\n    correct,\n    score,\n    setScore,\n    setQuestions\n}) => {\n    const[selected,setSelected] = useState()\n    const[err,setErr] = useState(false)\n\n    const handleSelect = (i) => {\n        if(selected === i && selected === correct){\n            return 'selected';\n        }else if(selected === i && selected !== correct){\n            return 'wrong';\n        }else if(i === correct){\n            return 'select';\n        }\n    }\n\n    const handleCheck = (i) => {\n        setSelected(i)\n        if(i === correct){\n            setScore(score + 1)\n        }\n        setScore(false)\n    }\n\n    return(\n        <>\n        <MainDiv>\n            <h1>Question {currQuestion + 1}</h1>\n\n            <SingleQuestion>\n                <h2>{questions[currQuestion].question}</h2>\n\n                <Options className=\"option\">\n                        {err && <p>Choose appropriate ans!</p>}\n                        {options && options.map((i) => <OptionsBtn\n                        onClick={() => handleCheck(i)}\n                        className={`${selected && handleSelect(i)}`}\n                        >{i}</OptionsBtn>)}\n                </Options>\n\n                <div>\n                        <button>Cancel</button>\n                        <button>Next Question</button>\n                </div>  \n            </SingleQuestion>\n\n        </MainDiv>\n        </>\n    )\n}\n\nexport default Question;"]},"metadata":{},"sourceType":"module"}